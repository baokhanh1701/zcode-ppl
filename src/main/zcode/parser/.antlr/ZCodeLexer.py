# Generated from d://Projects//zcode-ppl//assignment3//assignment3-initial//src//main//zcode//parser//ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,51,373,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,
        1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
        1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,
        1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,
        1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,
        1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
        1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,
        1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,
        1,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,
        1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,
        1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,5,43,
        285,8,43,10,43,12,43,288,9,43,1,44,1,44,5,44,292,8,44,10,44,12,44,
        295,9,44,1,45,1,45,3,45,299,8,45,1,45,1,45,3,45,303,8,45,1,45,1,
        45,3,45,307,8,45,1,46,4,46,310,8,46,11,46,12,46,311,1,46,3,46,315,
        8,46,1,47,4,47,318,8,47,11,47,12,47,319,1,48,1,48,3,48,324,8,48,
        1,48,4,48,327,8,48,11,48,12,48,328,1,49,1,49,1,50,1,50,1,50,1,50,
        5,50,337,8,50,10,50,12,50,340,9,50,1,50,1,50,1,51,4,51,345,8,51,
        11,51,12,51,346,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,
        358,8,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,3,53,367,8,53,1,53,1,
        53,1,54,1,54,1,54,0,0,55,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
        63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,
        85,43,87,0,89,44,91,45,93,0,95,0,97,0,99,46,101,47,103,48,105,49,
        107,50,109,51,1,0,15,5,0,8,8,10,10,12,13,34,34,92,92,7,0,39,39,92,
        92,98,98,102,102,110,110,114,114,116,116,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,0,69,69,101,101,2,0,43,
        43,45,45,1,0,10,10,2,0,10,10,12,13,3,0,9,9,13,13,32,32,6,0,92,92,
        98,98,102,102,110,110,114,114,116,116,2,0,12,13,92,92,1,0,39,39,
        1,0,34,34,1,1,10,10,385,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
        1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,89,
        1,0,0,0,0,91,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,
        105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,1,111,1,0,0,0,3,116,1,0,
        0,0,5,122,1,0,0,0,7,129,1,0,0,0,9,134,1,0,0,0,11,141,1,0,0,0,13,
        148,1,0,0,0,15,152,1,0,0,0,17,160,1,0,0,0,19,165,1,0,0,0,21,169,
        1,0,0,0,23,175,1,0,0,0,25,178,1,0,0,0,27,184,1,0,0,0,29,193,1,0,
        0,0,31,196,1,0,0,0,33,201,1,0,0,0,35,206,1,0,0,0,37,212,1,0,0,0,
        39,216,1,0,0,0,41,220,1,0,0,0,43,224,1,0,0,0,45,227,1,0,0,0,47,229,
        1,0,0,0,49,231,1,0,0,0,51,233,1,0,0,0,53,235,1,0,0,0,55,237,1,0,
        0,0,57,239,1,0,0,0,59,242,1,0,0,0,61,245,1,0,0,0,63,247,1,0,0,0,
        65,250,1,0,0,0,67,252,1,0,0,0,69,255,1,0,0,0,71,259,1,0,0,0,73,262,
        1,0,0,0,75,264,1,0,0,0,77,266,1,0,0,0,79,268,1,0,0,0,81,270,1,0,
        0,0,83,272,1,0,0,0,85,275,1,0,0,0,87,286,1,0,0,0,89,289,1,0,0,0,
        91,306,1,0,0,0,93,309,1,0,0,0,95,317,1,0,0,0,97,321,1,0,0,0,99,330,
        1,0,0,0,101,332,1,0,0,0,103,344,1,0,0,0,105,350,1,0,0,0,107,361,
        1,0,0,0,109,370,1,0,0,0,111,112,5,116,0,0,112,113,5,114,0,0,113,
        114,5,117,0,0,114,115,5,101,0,0,115,2,1,0,0,0,116,117,5,102,0,0,
        117,118,5,97,0,0,118,119,5,108,0,0,119,120,5,115,0,0,120,121,5,101,
        0,0,121,4,1,0,0,0,122,123,5,110,0,0,123,124,5,117,0,0,124,125,5,
        109,0,0,125,126,5,98,0,0,126,127,5,101,0,0,127,128,5,114,0,0,128,
        6,1,0,0,0,129,130,5,98,0,0,130,131,5,111,0,0,131,132,5,111,0,0,132,
        133,5,108,0,0,133,8,1,0,0,0,134,135,5,115,0,0,135,136,5,116,0,0,
        136,137,5,114,0,0,137,138,5,105,0,0,138,139,5,110,0,0,139,140,5,
        103,0,0,140,10,1,0,0,0,141,142,5,114,0,0,142,143,5,101,0,0,143,144,
        5,116,0,0,144,145,5,117,0,0,145,146,5,114,0,0,146,147,5,110,0,0,
        147,12,1,0,0,0,148,149,5,118,0,0,149,150,5,97,0,0,150,151,5,114,
        0,0,151,14,1,0,0,0,152,153,5,100,0,0,153,154,5,121,0,0,154,155,5,
        110,0,0,155,156,5,97,0,0,156,157,5,109,0,0,157,158,5,105,0,0,158,
        159,5,99,0,0,159,16,1,0,0,0,160,161,5,102,0,0,161,162,5,117,0,0,
        162,163,5,110,0,0,163,164,5,99,0,0,164,18,1,0,0,0,165,166,5,102,
        0,0,166,167,5,111,0,0,167,168,5,114,0,0,168,20,1,0,0,0,169,170,5,
        117,0,0,170,171,5,110,0,0,171,172,5,116,0,0,172,173,5,105,0,0,173,
        174,5,108,0,0,174,22,1,0,0,0,175,176,5,98,0,0,176,177,5,121,0,0,
        177,24,1,0,0,0,178,179,5,98,0,0,179,180,5,114,0,0,180,181,5,101,
        0,0,181,182,5,97,0,0,182,183,5,107,0,0,183,26,1,0,0,0,184,185,5,
        99,0,0,185,186,5,111,0,0,186,187,5,110,0,0,187,188,5,116,0,0,188,
        189,5,105,0,0,189,190,5,110,0,0,190,191,5,117,0,0,191,192,5,101,
        0,0,192,28,1,0,0,0,193,194,5,105,0,0,194,195,5,102,0,0,195,30,1,
        0,0,0,196,197,5,101,0,0,197,198,5,108,0,0,198,199,5,115,0,0,199,
        200,5,101,0,0,200,32,1,0,0,0,201,202,5,101,0,0,202,203,5,108,0,0,
        203,204,5,105,0,0,204,205,5,102,0,0,205,34,1,0,0,0,206,207,5,98,
        0,0,207,208,5,101,0,0,208,209,5,103,0,0,209,210,5,105,0,0,210,211,
        5,110,0,0,211,36,1,0,0,0,212,213,5,101,0,0,213,214,5,110,0,0,214,
        215,5,100,0,0,215,38,1,0,0,0,216,217,5,110,0,0,217,218,5,111,0,0,
        218,219,5,116,0,0,219,40,1,0,0,0,220,221,5,97,0,0,221,222,5,110,
        0,0,222,223,5,100,0,0,223,42,1,0,0,0,224,225,5,111,0,0,225,226,5,
        114,0,0,226,44,1,0,0,0,227,228,5,43,0,0,228,46,1,0,0,0,229,230,5,
        45,0,0,230,48,1,0,0,0,231,232,5,42,0,0,232,50,1,0,0,0,233,234,5,
        47,0,0,234,52,1,0,0,0,235,236,5,37,0,0,236,54,1,0,0,0,237,238,5,
        61,0,0,238,56,1,0,0,0,239,240,5,33,0,0,240,241,5,61,0,0,241,58,1,
        0,0,0,242,243,5,60,0,0,243,244,5,45,0,0,244,60,1,0,0,0,245,246,5,
        60,0,0,246,62,1,0,0,0,247,248,5,60,0,0,248,249,5,61,0,0,249,64,1,
        0,0,0,250,251,5,62,0,0,251,66,1,0,0,0,252,253,5,62,0,0,253,254,5,
        61,0,0,254,68,1,0,0,0,255,256,5,46,0,0,256,257,5,46,0,0,257,258,
        5,46,0,0,258,70,1,0,0,0,259,260,5,61,0,0,260,261,5,61,0,0,261,72,
        1,0,0,0,262,263,5,40,0,0,263,74,1,0,0,0,264,265,5,41,0,0,265,76,
        1,0,0,0,266,267,5,91,0,0,267,78,1,0,0,0,268,269,5,93,0,0,269,80,
        1,0,0,0,270,271,5,44,0,0,271,82,1,0,0,0,272,273,5,39,0,0,273,274,
        5,34,0,0,274,84,1,0,0,0,275,276,5,34,0,0,276,277,3,87,43,0,277,278,
        5,34,0,0,278,279,6,42,0,0,279,86,1,0,0,0,280,285,8,0,0,0,281,282,
        5,92,0,0,282,285,7,1,0,0,283,285,3,83,41,0,284,280,1,0,0,0,284,281,
        1,0,0,0,284,283,1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,287,
        1,0,0,0,287,88,1,0,0,0,288,286,1,0,0,0,289,293,7,2,0,0,290,292,7,
        3,0,0,291,290,1,0,0,0,292,295,1,0,0,0,293,291,1,0,0,0,293,294,1,
        0,0,0,294,90,1,0,0,0,295,293,1,0,0,0,296,298,3,93,46,0,297,299,3,
        95,47,0,298,297,1,0,0,0,298,299,1,0,0,0,299,307,1,0,0,0,300,302,
        3,93,46,0,301,303,3,95,47,0,302,301,1,0,0,0,302,303,1,0,0,0,303,
        304,1,0,0,0,304,305,3,97,48,0,305,307,1,0,0,0,306,296,1,0,0,0,306,
        300,1,0,0,0,307,92,1,0,0,0,308,310,7,4,0,0,309,308,1,0,0,0,310,311,
        1,0,0,0,311,309,1,0,0,0,311,312,1,0,0,0,312,314,1,0,0,0,313,315,
        5,46,0,0,314,313,1,0,0,0,314,315,1,0,0,0,315,94,1,0,0,0,316,318,
        7,4,0,0,317,316,1,0,0,0,318,319,1,0,0,0,319,317,1,0,0,0,319,320,
        1,0,0,0,320,96,1,0,0,0,321,323,7,5,0,0,322,324,7,6,0,0,323,322,1,
        0,0,0,323,324,1,0,0,0,324,326,1,0,0,0,325,327,7,4,0,0,326,325,1,
        0,0,0,327,328,1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,329,98,1,0,
        0,0,330,331,7,7,0,0,331,100,1,0,0,0,332,333,5,35,0,0,333,334,5,35,
        0,0,334,338,1,0,0,0,335,337,8,8,0,0,336,335,1,0,0,0,337,340,1,0,
        0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,341,1,0,0,0,340,338,1,0,
        0,0,341,342,6,50,1,0,342,102,1,0,0,0,343,345,7,9,0,0,344,343,1,0,
        0,0,345,346,1,0,0,0,346,344,1,0,0,0,346,347,1,0,0,0,347,348,1,0,
        0,0,348,349,6,51,1,0,349,104,1,0,0,0,350,351,5,34,0,0,351,357,3,
        87,43,0,352,353,5,92,0,0,353,358,8,10,0,0,354,358,7,11,0,0,355,356,
        7,12,0,0,356,358,8,13,0,0,357,352,1,0,0,0,357,354,1,0,0,0,357,355,
        1,0,0,0,358,359,1,0,0,0,359,360,6,52,2,0,360,106,1,0,0,0,361,362,
        5,34,0,0,362,366,3,87,43,0,363,364,5,13,0,0,364,367,5,10,0,0,365,
        367,7,14,0,0,366,363,1,0,0,0,366,365,1,0,0,0,367,368,1,0,0,0,368,
        369,6,53,3,0,369,108,1,0,0,0,370,371,9,0,0,0,371,372,6,54,4,0,372,
        110,1,0,0,0,16,0,284,286,293,298,302,306,311,314,319,323,328,338,
        346,357,366,5,1,42,0,6,0,0,1,52,1,1,53,2,1,54,3
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TRUE = 1
    FALSE = 2
    NUMBER = 3
    BOOL = 4
    STRING = 5
    RETURN = 6
    VAR = 7
    DYNAMIC = 8
    FUNC = 9
    FOR = 10
    UNTIL = 11
    BY = 12
    BREAK = 13
    CONTINUE = 14
    IF = 15
    ELSE = 16
    ELIF = 17
    BEGIN = 18
    END = 19
    NOT = 20
    AND = 21
    OR = 22
    ADD = 23
    SUB_AND_NEG = 24
    MUL = 25
    DIV = 26
    MOD = 27
    EQ = 28
    NEQ = 29
    ASSIGN = 30
    LESS_THAN = 31
    LESS_THAN_EQUAL = 32
    GREATER_THAN = 33
    GREATER_THAN_EQUAL = 34
    STRING_CONCAT = 35
    STRING_EQUAL = 36
    LP = 37
    RP = 38
    LB = 39
    RB = 40
    CM = 41
    INSIDE_QUOTE = 42
    STRINGLIT = 43
    IDENTIFIER = 44
    ZNUM = 45
    NEWLINE = 46
    COMMENTS = 47
    WS = 48
    ILLEGAL_ESCAPE = 49
    UNCLOSE_STRING = 50
    ERROR_CHAR = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'true'", "'false'", "'number'", "'bool'", "'string'", "'return'", 
            "'var'", "'dynamic'", "'func'", "'for'", "'until'", "'by'", 
            "'break'", "'continue'", "'if'", "'else'", "'elif'", "'begin'", 
            "'end'", "'not'", "'and'", "'or'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'='", "'!='", "'<-'", "'<'", "'<='", "'>'", "'>='", 
            "'...'", "'=='", "'('", "')'", "'['", "']'", "','", "''\"'" ]

    symbolicNames = [ "<INVALID>",
            "TRUE", "FALSE", "NUMBER", "BOOL", "STRING", "RETURN", "VAR", 
            "DYNAMIC", "FUNC", "FOR", "UNTIL", "BY", "BREAK", "CONTINUE", 
            "IF", "ELSE", "ELIF", "BEGIN", "END", "NOT", "AND", "OR", "ADD", 
            "SUB_AND_NEG", "MUL", "DIV", "MOD", "EQ", "NEQ", "ASSIGN", "LESS_THAN", 
            "LESS_THAN_EQUAL", "GREATER_THAN", "GREATER_THAN_EQUAL", "STRING_CONCAT", 
            "STRING_EQUAL", "LP", "RP", "LB", "RB", "CM", "INSIDE_QUOTE", 
            "STRINGLIT", "IDENTIFIER", "ZNUM", "NEWLINE", "COMMENTS", "WS", 
            "ILLEGAL_ESCAPE", "UNCLOSE_STRING", "ERROR_CHAR" ]

    ruleNames = [ "TRUE", "FALSE", "NUMBER", "BOOL", "STRING", "RETURN", 
                  "VAR", "DYNAMIC", "FUNC", "FOR", "UNTIL", "BY", "BREAK", 
                  "CONTINUE", "IF", "ELSE", "ELIF", "BEGIN", "END", "NOT", 
                  "AND", "OR", "ADD", "SUB_AND_NEG", "MUL", "DIV", "MOD", 
                  "EQ", "NEQ", "ASSIGN", "LESS_THAN", "LESS_THAN_EQUAL", 
                  "GREATER_THAN", "GREATER_THAN_EQUAL", "STRING_CONCAT", 
                  "STRING_EQUAL", "LP", "RP", "LB", "RB", "CM", "INSIDE_QUOTE", 
                  "STRINGLIT", "STRINGLIT_", "IDENTIFIER", "ZNUM", "INTPART", 
                  "DECPART", "EXPPART", "NEWLINE", "COMMENTS", "WS", "ILLEGAL_ESCAPE", 
                  "UNCLOSE_STRING", "ERROR_CHAR" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[42] = self.STRINGLIT_action 
            actions[52] = self.ILLEGAL_ESCAPE_action 
            actions[53] = self.UNCLOSE_STRING_action 
            actions[54] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRINGLIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:-1];
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.text = self.text[1:]; raise IllegalEscape(self.text)
            		
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            raise UncloseString(self.text[1:].rstrip("\r\n"))
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            raise ErrorToken(self.text)
     


